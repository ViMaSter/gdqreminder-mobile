name: Mobile App build

on:
  push:
    branches:
      - main
      - internal
  pull_request:
  workflow_dispatch:
    inputs:
      forceProductionRelease:
        description: Force Google Play Production release?
        required: true
        default: false
        type: boolean
      forceInternalRelease:
        description: Force Google Play Internal release?
        required: true
        default: false
        type: boolean

env:
  SENTRY_AUTH_TOKEN: ${{ (((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.forceProductionRelease) || ((github.event_name == 'push' && github.ref == 'refs/heads/internal') || github.event.inputs.forceInternalRelease)) && secrets.SENTRY_AUTH_TOKEN || '' }}

jobs:
  prepareCache:
    name: Pre-build + test
    runs-on: ubuntu-latest
    outputs:
      SENTRY_RELEASE: ${{ steps.version.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ (((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.forceProductionRelease) || ((github.event_name == 'push' && github.ref == 'refs/heads/internal') || github.event.inputs.forceInternalRelease)) && secrets.PAT || secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: | 
          npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npm run test:e2e
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - run: | 
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.forceProductionRelease) || ((github.event_name == 'push' && github.ref == 'refs/heads/internal') || github.event.inputs.forceInternalRelease)
      - id: version
        run: | 
          version=v$(jq -r .version package.json)
          echo $version
          echo "SENTRY_RELEASE=$version" >> $GITHUB_OUTPUT
          echo "SENTRY_RELEASE=$version" >> $GITHUB_ENV
          export SENTRY_RELEASE=$version
          SENTRY_RELEASE=$version
          npm run build
      - run: npx cap sync android
      - run: npx cap sync ios

      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}
          
  buildAAB:
    name: Build AAB
    runs-on: ubuntu-latest
    needs: [prepareCache]
    env:
      SENTRY_RELEASE: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - run: cd android && ./gradlew :app:bundleRelease
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: aab-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: ./android/app/build/outputs/bundle/release/app-release.aab

  buildAPK:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [prepareCache]
    env:
      SENTRY_RELEASE: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - run: cd android && ./gradlew assembleDebug
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: apk-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: ./android/app/build/outputs/apk/debug/app-debug.apk
   
  buildIOS:
    name: Build iOS
    runs-on: macos-15
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'push' && github.ref == 'refs/heads/internal') || github.event.inputs.forceRelease
    needs: [prepareCache]
    env:
      SENTRY_RELEASE: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}

      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Install the Apple certificate and provisioning profile
        id: profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=${{ runner.temp }}/build_certificate.p12
          PP_PATH=${{ runner.temp }}/profile.mobileprovision
          KEYCHAIN_PATH=${{ runner.temp }}/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          uuid=`grep UUID -A1 -a $PP_PATH | grep -io "[-A-F0-9]\{36\}"`
          echo "uuid=$uuid" >> $GITHUB_OUTPUT

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision
          
      - name: Fetch GoogleService-Info.plist
        env:
          GOOGLESERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLESERVICE_INFO_PLIST_BASE64 }}
        run: |
          echo -n "$GOOGLESERVICE_INFO_PLIST_BASE64" | base64 --decode > ios/App/App/GoogleService-Info.plist

      - run: |
          cd ios/App
          version=$(cat ../../package.json | sed -n 's/.*"version": "\(.*\)",/\1/p')
          sed -i '' "s/\tCURRENT_PROJECT_VERSION = .*/\tCURRENT_PROJECT_VERSION = $version;/g" App.xcodeproj/project.pbxproj
          sed -i '' "s/\tMARKETING_VERSION = .*/\tMARKETING_VERSION = $version;/g" App.xcodeproj/project.pbxproj

      - name: build archive
        run: |
          cd ios/App
          xcodebuild clean
          pod install

          xcodebuild PROVISIONING_PROFILE=${{ steps.profile.outputs.uuid }} \
          -workspace App.xcworkspace \
          -scheme "App" \
          -archivePath $RUNNER_TEMP/App.xcarchive \
          -configuration Release \
          -arch arm64 \
          clean archive
          
      - name: export ipa
        env:
          EXPORT_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_PLIST_PATH=${{ runner.temp }}/ExportOptions.plist
          echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
          xcodebuild PROVISIONING_PROFILE=${{ steps.profile.outputs.uuid }} -exportArchive -archivePath $RUNNER_TEMP/App.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath ${{ runner.temp }}/export

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ios-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: ${{ runner.temp }}/export/App.ipa

      - name: decode API key
        env:
          API_KEY_BASE64: ${{ secrets.IOS_APPSTORE_API_PRIVATE_KEY }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.IOS_APPSTORE_API_KEY_ID }}.p8
      - name: Upload to testflight
        run: |
          xcrun altool --validate-app -f ${{ runner.temp }}/export/App.ipa -t ios --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }}
          xcrun altool --upload-app -f ${{ runner.temp }}/export/App.ipa -t ios --apiKey ${{ secrets.IOS_APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.IOS_APPSTORE_ISSUER_ID }}

  publishToProduction:
    name: '[PRODUCTION] Publish to Google Play'
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.forceProductionRelease
    runs-on: ubuntu-latest
    needs: [prepareCache, buildAAB, buildAPK]
    env:
      SENTRY_RELEASE: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}
      - run: |
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "github.event.inputs.forceProductionRelease: ${{github.event.inputs.forceProductionRelease}}"
      - uses: actions/download-artifact@v4
        with:
          name: aab-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: aab
      - uses: actions/download-artifact@v4
        with:
          name: apk-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: apk
      - uses: ViMaSter/sign-android-release@latest
        with:
          releaseDirectory: ./aab
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICEACCOUNTJSON }}
          packageName: ke.mahn.gdqreminder
          track: production
          status: completed
          releaseFiles: ./aab/app-release.aab
      - uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: vimaster
          SENTRY_PROJECT: gdqreminder-mobile
        with:
          environment: production
          sourcemaps: ./dist/assets
          version: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}

  publishToInternal:
    name: '[INTERNAL] Publish to Google Play'
    if: (github.event_name == 'push' && github.ref == 'refs/heads/internal') || github.event.inputs.forceInternalRelease
    runs-on: ubuntu-latest
    needs: [prepareCache, buildAAB, buildAPK]
    env:
      SENTRY_RELEASE: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}
      - run: |
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "github.event.inputs.forceInternalRelease: ${{github.event.inputs.forceInternalRelease}}"
      - uses: actions/download-artifact@v4
        with:
          name: aab-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: aab
      - uses: actions/download-artifact@v4
        with:
          name: apk-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: apk
      - uses: ViMaSter/sign-android-release@latest
        with:
          releaseDirectory: ./aab
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICEACCOUNTJSON }}
          packageName: ke.mahn.gdqreminder
          track: internal
          status: completed
          releaseFiles: ./aab/app-release.aab
      - uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: vimaster
          SENTRY_PROJECT: gdqreminder-mobile
        with:
          environment: internal
          sourcemaps: ./dist/assets
          version: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}

  githubRelease:
    name: Publish to GitHub Releases
    if: ((github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.forceProductionRelease) || ((github.event_name == 'push' && github.ref == 'refs/heads/internal') || github.event.inputs.forceInternalRelease)
    runs-on: ubuntu-latest
    needs: [prepareCache, buildAAB, buildAPK]
    env:
      SENTRY_RELEASE: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
    steps:
      - uses: actions/cache@v4
        with:
          path: |
            ./*
          key: ${{ github.run_id }}
      - uses: actions/download-artifact@v4
        with:
          name: apk-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: apk
      - uses: actions/download-artifact@v4
        with:
          name: aab-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          path: aab
      - run: |
          cd apk
          find . -name "*.apk" -exec mv {} ../gdqreminder-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}.apk \;
          cd ..
          
          cd aab
          find . -name "*.aab" -exec mv {} ../gdqreminder-${{ needs.prepareCache.outputs.SENTRY_RELEASE }}.aab \;
          cd ..
          echo "${{ needs.prepareCache.outputs.SENTRY_RELEASE }}"
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Add AAB and APK to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepareCache.outputs.SENTRY_RELEASE }}
          artifacts: "*.aab,*.apk"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}